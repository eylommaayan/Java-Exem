public class Node {
    private int _number;
    private Node _leftSon, _rightSon;

    public Node(int num) {
        _number = num;
        _leftSon = null;
        _rightSon = null;
    }

    public int getNumber() { return _number; }
    public Node getLeftSon() { return _leftSon; }
    public Node getRightSon() { return _rightSon; }
}


public static int f(Node t) {
    if (t == null)
        return 0;
    return f(t.getLeftSon()) + f(t.getRightSon()) + 1;
}


public static int g(Node t, int x) {
    if(t == null)
        return 0; // Base case: אם הצומת הוא null, החזרה 0.
    if(t.getNumber() > x)
        return g(t.getLeftSon(), x); // אם ערך הצומת גדול מ-x, יש לבדוק רק את תת-העץ השמאלי.
    if(t.getNumber() < x)
        return g(t.getLeftSon(), x) + 1 + g(t.getRightSon(), x); // אם ערך הצומת קטן מ-x, סופרים את הצומת ובודקים את שני תתי-העץ.
    return f(t.getLeftSon()); // אם ערך הצומת שווה ל-x, סופרים רק את הצמתים בתת-העץ השמאלי.
}

        300
       /   \
     125   400
     /  \     \
   90   145   450
  /     /  \
50   135  200
        /
     140




2 (בנקי)
(1)
מה מבצעת השיטה f באופן כללי?
שימו לב,
עליכם לתת תיאור ממוקד של מה עושה השיטה באופן כללי,
ולא תיאור של מה עושה כל שורה בשיטה,
או איך היא מבצעת זאת.
כלומר,
מה המשמעות של הערך המוחזר מקריאה לשיטה f.

התשובה היא:

שיטה זו סופרת באופן רקורסיבי את מספר הצמתים עד לשורש ומחזירה את הסכום הכולל

3 (בנקי)
(ii)
איזה ערך תחזיר השיטה g בעקבות הקריאה BinaryTree.g(root, 200)?

התשובה היא:
6

5 (בנקי)
(iii)
מה מבצעת השיטה g באופן כללי בתנאי לה שורש של עץ חיפוש בינרי ומספר x שלם כפרמטר?
שימו לב,
עליכם לתת תיאור ממוקד של מה עושה השיטה באופן כללי,
ולא תיאור של מה עושה כל שורה בשיטה,
כלומר,
מה המשמעות של הערך המוחזר מקריאה לשיטה g בהתחשב ב-root ו-x.

התשובה היא: ...

השיטה g 
מחזירה את מספר הצמתים בעלי ערך הקטן מ-x בעץ חיפוש בינארי
מקרה קצה:
בהינתן עץ ריק יוחזר אפס,
ביהנתן x
ששווה לשורש העץ יוחזר מספר צמתי תת-עץ השמאלי.


הסבר של כל שלב:
Base Case (t == null):

אם הצומת t הוא null, הפונקציה מחזירה 0 משום שאין צמתים לספור.

ערך הצומת גדול מ-x (t.getNumber() > x):

הפונקציה תבצע חיפוש רקורסיבי בתת-העץ השמאלי בלבד, משום שכל הערכים בתת-העץ הימני יהיו גדולים יותר מ-x.

ערך הצומת קטן מ-x (t.getNumber() < x):

הפונקציה סופרת את הצומת הנוכחי (מאחר והוא קטן מ-x) ואז ממשיכה לספור את הצמתים בתת-העץ השמאלי והימני.

ערך הצומת שווה ל-x (t.getNumber() == x):

הפונקציה סופרת רק את הצמתים בתת-העץ השמאלי על ידי קריאה לפונקציה f(t.getLeftSon()).

מקרים קיצוניים:
עץ ריק (Base Case):

אם העץ ריק (t == null), הפונקציה תחזיר 0, מה שמציין שאין צמתים לספור.

x שווה לערך השורש:

אם x שווה לערך של השורש, הפונקציה סופרת רק את הצמתים בתת-העץ השמאלי, כי כל הערכים שם יהיו קטנים מ-x.



