public class IntList {
    private IntNode _head; // משתנה פרטי שמייצג את הצומת הראשון ברשימה המקושרת

    public IntList() {
        _head = null; // אתחול הראש ל-null כדי לציין שהרשימה ריקה בתחילת הדרך
    }

    // פונקציה בשם what שמבצעת פעולה כלשהי על שתי רשימות מקושרות
    public double what(IntList other) {
        int c = 0; // משתנה שמונה את מספר הצמתים בשתי הרשימות
        IntNode cu = _head; // התחלת החישוב מהראש של הרשימה הנוכחית

        // לולאה ראשונה שסופרת את מספר הצמתים ברשימה הנוכחית
        while (cu != null) {
            cu = cu.getNext(); // מעבר לצומת הבא
            c++; // הגדלת הספירה עבור כל צומת
        }

        cu = other._head; // מעבר לספירה של הצמתים ברשימה השנייה

        // לולאה שנייה שסופרת את מספר הצמתים ברשימה השנייה
        while (cu != null) {
            cu = cu.getNext(); // מעבר לצומת הבא
            c++; // הגדלת הספירה עבור כל צומת
        }

        // משתנים שמשמשים לאחסון הצמתים שנדרשים לחישוב
        IntNode cu1 = _head;
        IntNode cu2 = other._head;
        int m = c / 2; // משתנה שמחשב את נקודת האמצע במספר הצמתים הכולל

        if (c % 2 == 1) {
            m++; // אם מספר הצמתים הוא אי-זוגי, אנו זקוקים לנקודת אמצע אחת נוספת
        }

        int count = 1; // משתנה למעקב אחר מספר האיטרציות

        // לולאה שממשיכה כל עוד שני הצמתים אינם null
        while (cu1 != null && cu2 != null) {
            // אם הגענו לנקודת האמצע במבנה הנתונים
            if (count == m) {
                if (c % 2 == 1) {
                    // אם מספר הצמתים אי-זוגי, מחזירים את הערך הקטן מבין שני הצמתים
                    if (cu1.getValue() < cu2.getValue()) {
                        return cu1.getValue();
                    } else {
                        return cu2.getValue();
                    }
                } else {
                    // במקרה של מספר זוגי, מחזירים את הממוצע של שני הערכים
                    if (cu1.getValue() < cu2.getValue()) { 
                        // אם הערך של cu1 קטן מהערך של cu2
                        if (cu1.getNext() != null && cu1.getNext().getValue() < cu2.getValue()) { 
                            // אם הצומת הבא של cu1 אינו null והערך שלו קטן מהערך של cu2
                            return (cu1.getValue() + cu1.getNext().getValue()) / 2.0;
                            // מחזירים את הממוצע של הערך הנוכחי והערך הבא ב-cu1
                        } else {
                            return (cu1.getValue() + cu2.getValue()) / 2.0;
                            // אחרת, מחזירים את הממוצע בין הערך הנוכחי של cu1 לערך של cu2
                        }
                    } else {
                        // אם הערך של cu1 אינו קטן מהערך של cu2
                        if (cu2.getNext() != null && cu2.getNext().getValue() < cu1.getValue()) {
                            // אם הצומת הבא של cu2 אינו null והערך שלו קטן מהערך של cu1
                            return (cu2.getValue() + cu2.getNext().getValue()) / 2.0;
                            // מחזירים את הממוצע של הערך הנוכחי והערך הבא ב-cu2
                        } else {
                            return (cu1.getValue() + cu2.getValue()) / 2.0;
                            // אחרת, מחזירים את הממוצע בין הערך הנוכחי של cu1 לערך של cu2
                        }
                    }
                }
                
            }

            // המשך במבנה הנתונים בהתאם לערכים
            if (cu1.getValue() < cu2.getValue()) {
                cu1 = cu1.getNext();
            } else {
                cu2 = cu2.getNext();
            }
            count++;
        }

        // משתנה שמכיל את הצומת הבא שימשיך לאחר שהלולאה הסתיימה
        IntNode newCu;
        if (cu1 != null) {
            newCu = cu1;
        } else {
            newCu = cu2;
        }

        // לולאה שמבצעת המשך עבור הצמתים הנוספים עד ההגעה לנקודת האמצע
        while (count != m) {
            newCu = newCu.getNext();
            count++;
        }

        // מחזירים את הערך או ממוצע הערכים בהתאם למספר הצמתים
        if (c % 2 == 1) {
            return newCu.getValue();
        } else {
            return (newCu.getValue() + newCu.getNext().getValue()) / 2.0;
        }
    }
}


---

**שאלה א (3 נקודות):**
אם נפעיל את השיטה what על הרשימה `{1, 3, 5, 6}`
 והרשימה other היא `{2, 2, 4}` 
 מה יוחזר?

---

**שאלה ב (3 נקודות):**
אם נפעיל את השיטה what על הרשימה `{1, 3, 5, 6}`
 והרשימה other היא `{8, 12, 14, 16}` 
 מה יוחזר?

---

**שאלה ג (2 נקודות):**
אם נפעיל את השיטה what על הרשימה `{1, 3, 5, 6}` 
והרשימה other היא `{8, 12, 14, 16}` 
מה יוחזר?

---

**שאלה ד (5 נקודות):**
מה מבצעת השיטה what
 באופן כללי כשהיא מופעלת על רשימה ממוינת ומקבלת כפרמטר רשימה ממוינת אחרת?
  הסבירו בקצרה מה השיטה עושה ולא בצעו זאת. 

